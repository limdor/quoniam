load("@rules_cc//cc:defs.bzl", "cc_library")
load("@com_limdor_rules_qt//:qt.bzl", "qt_cc_library")

qt_cc_library(
    name = "gl_canvas",
    srcs = ["GLCanvas.cpp"],
    hdrs = ["GLCanvas.h"],
    copts = ["/std:c++latest"],
    visibility = ["//visibility:public"],
    deps = [
        ":core",
        "@qt//:qt_widgets",
    ],
)

cc_library(
    name = "core",
    srcs = [
        "AxisAlignedBoundingBox.cpp",
        "BoundingSphere.cpp",
        "Camera.cpp",
        "GLSLProgram.cpp",
        "GLSLShader.cpp",
        "GPUGeometry.cpp",
        "GPUScene.cpp",
        "GPUSceneNode.cpp",
        "Geometry.cpp",
        "Gizmo.cpp",
        "Material.cpp",
        "Mesh.cpp",
        "OrthographicCamera.cpp",
        "PerspectiveCamera.cpp",
        "Scene.cpp",
        "SceneLoader.cpp",
        "SceneNode.cpp",
        "SerializedSceneGeometry.cpp",
        "Texture.cpp",
        "TrackballCamera.cpp",
    ],
    hdrs = [
        "AxisAlignedBoundingBox.h",
        "BoundingSphere.h",
        "Camera.h",
        "GLSLProgram.h",
        "GLSLShader.h",
        "GPUGeometry.h",
        "GPUScene.h",
        "GPUSceneNode.h",
        "Geometry.h",
        "GeometryTopology.h",
        "Gizmo.h",
        "LightSettings.h",
        "Material.h",
        "Mesh.h",
        "OrthographicCamera.h",
        "PerspectiveCamera.h",
        "Scene.h",
        "SceneLoader.h",
        "SceneNode.h",
        "SerializedSceneGeometry.h",
        "Texture.h",
        "TrackballCamera.h",
    ],
    copts = ["/std:c++latest"],
    includes = ["."],
    visibility = ["//visibility:public"],
    deps = [
        "//src/utils",
        "//third_party/assimp",
        "//third_party/miniball",
        "@glew",
        "@glm",
        "@qt//:qt_core",
        "@qt//:qt_widgets",
    ],
)
